{"version":3,"sources":["bootstrap.js"],"names":["globalThis","factory","exports","module","MonacoBootstrap","error","console","warn","this","Module","require","path","fs","Error","stackTraceLimit","process","on","enableASARSupport","appRoot","NODE_MODULES_PATH","join","undefined","platform","__dirname","substr","NODE_MODULES_ASAR_PATH","originalResolveLookupPaths","_resolveLookupPaths","request","parent","paths","Array","isArray","i","len","length","splice","avoidMonkeyPatchFromAppInsights","env","global","configurePortable","product","dirname","getApplicationPath","portableDataPath","portableDataName","portable","applicationName","getPortableDataPath","isPortable","existsSync","portableTempPath","isTempPortable","setupNLS","nlsConfig","availableLanguages","JSON","parse","e","_resolvedLanguagePackCoreLocation","bundles","Object","create","loadBundle","bundle","language","cb","result","bundleFile","replace","promises","readFile","then","content","json","catch","_corruptedFile","writeFile","fileUriFromPath","_path","uri","pathName","resolve","charAt","startsWith","encodeURI"],"mappings":"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","file":"bootstrap.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n// Simple module style to support node.js and browser environments\n(function (globalThis, factory) {\n\n\t// Node.js\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t}\n\n\t// Browser\n\telse {\n\t\ttry {\n\t\t\tglobalThis.MonacoBootstrap = factory();\n\t\t} catch (error) {\n\t\t\tconsole.warn(error); // expected when e.g. running with sandbox: true (TODO@sandbox eventually consolidate this)\n\t\t}\n\t}\n}(this, function () {\n\tconst Module = require('module');\n\tconst path = require('path');\n\tconst fs = require('fs');\n\n\t//#region global bootstrapping\n\n\t// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\tError.stackTraceLimit = 100;\n\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\n\t// (https://github.com/electron/electron/issues/13254)\n\tprocess.on('SIGPIPE', () => {\n\t\tconsole.error(new Error('Unexpected SIGPIPE'));\n\t});\n\n\t//#endregion\n\n\n\t//#region Add support for using node_modules.asar\n\n\t/**\n\t * @param {string} appRoot\n\t */\n\tfunction enableASARSupport(appRoot) {\n\t\tlet NODE_MODULES_PATH = appRoot ? path.join(appRoot, 'node_modules') : undefined;\n\t\tif (!NODE_MODULES_PATH) {\n\t\t\tNODE_MODULES_PATH = path.join(__dirname, '../node_modules');\n\t\t} else {\n\t\t\t// use the drive letter casing of __dirname\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tNODE_MODULES_PATH = __dirname.substr(0, 1) + NODE_MODULES_PATH.substr(1);\n\t\t\t}\n\t\t}\n\n\t\tconst NODE_MODULES_ASAR_PATH = `${NODE_MODULES_PATH}.asar`;\n\n\t\t// @ts-ignore\n\t\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t\t// @ts-ignore\n\t\tModule._resolveLookupPaths = function (request, parent) {\n\t\t\tconst paths = originalResolveLookupPaths(request, parent);\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\t\tif (paths[i] === NODE_MODULES_PATH) {\n\t\t\t\t\t\tpaths.splice(i, 0, NODE_MODULES_ASAR_PATH);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn paths;\n\t\t};\n\t}\n\n\t//#endregion\n\n\n\t//#region URI helpers\n\n\t/**\n\t * @param {string} _path\n\t * @returns {string}\n\t */\n\tfunction fileUriFromPath(_path) {\n\t\tlet pathName = path.resolve(_path).replace(/\\\\/g, '/');\n\t\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\t\tpathName = `/${pathName}`;\n\t\t}\n\n\t\t/** @type {string} */\n\t\tlet uri;\n\t\tif (process.platform === 'win32' && pathName.startsWith('//')) { // specially handle Windows UNC paths\n\t\t\turi = encodeURI(`file:${pathName}`);\n\t\t} else {\n\t\t\turi = encodeURI(`file://${pathName}`);\n\t\t}\n\n\t\treturn uri.replace(/#/g, '%23');\n\t}\n\n\t//#endregion\n\n\n\t//#region NLS helpers\n\n\t/**\n\t * @returns {{locale?: string, availableLanguages: {[lang: string]: string;}, pseudo?: boolean }}\n\t */\n\tfunction setupNLS() {\n\n\t\t// Get the nls configuration into the process.env as early as possible.\n\t\tlet nlsConfig = { availableLanguages: {} };\n\t\tif (process.env['VSCODE_NLS_CONFIG']) {\n\t\t\ttry {\n\t\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t\tif (nlsConfig._resolvedLanguagePackCoreLocation) {\n\t\t\tconst bundles = Object.create(null);\n\n\t\t\tnlsConfig.loadBundle = function (bundle, language, cb) {\n\t\t\t\tconst result = bundles[bundle];\n\t\t\t\tif (result) {\n\t\t\t\t\tcb(undefined, result);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst bundleFile = path.join(nlsConfig._resolvedLanguagePackCoreLocation, `${bundle.replace(/\\//g, '!')}.nls.json`);\n\t\t\t\tfs.promises.readFile(bundleFile, 'utf8').then(function (content) {\n\t\t\t\t\tconst json = JSON.parse(content);\n\t\t\t\t\tbundles[bundle] = json;\n\n\t\t\t\t\tcb(undefined, json);\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (nlsConfig._corruptedFile) {\n\t\t\t\t\t\t\tfs.promises.writeFile(nlsConfig._corruptedFile, 'corrupted', 'utf8').catch(function (error) { console.error(error); });\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcb(error, undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\treturn nlsConfig;\n\t}\n\n\t//#endregion\n\n\n\t//#region Portable helpers\n\n\t/**\n\t * @param {{ portable: string; applicationName: string; }} product\n\t * @returns {{portableDataPath: string;isPortable: boolean;}}\n\t */\n\tfunction configurePortable(product) {\n\t\tconst appRoot = path.dirname(__dirname);\n\n\t\tfunction getApplicationPath() {\n\t\t\tif (process.env['VSCODE_DEV']) {\n\t\t\t\treturn appRoot;\n\t\t\t}\n\n\t\t\tif (process.platform === 'darwin') {\n\t\t\t\treturn path.dirname(path.dirname(path.dirname(appRoot)));\n\t\t\t}\n\n\t\t\treturn path.dirname(path.dirname(appRoot));\n\t\t}\n\n\t\tfunction getPortableDataPath() {\n\t\t\tif (process.env['VSCODE_PORTABLE']) {\n\t\t\t\treturn process.env['VSCODE_PORTABLE'];\n\t\t\t}\n\n\t\t\tif (process.platform === 'win32' || process.platform === 'linux') {\n\t\t\t\treturn path.join(getApplicationPath(), 'data');\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\tconst portableDataName = product.portable || `${product.applicationName}-portable-data`;\n\t\t\treturn path.join(path.dirname(getApplicationPath()), portableDataName);\n\t\t}\n\n\t\tconst portableDataPath = getPortableDataPath();\n\t\tconst isPortable = !('target' in product) && fs.existsSync(portableDataPath);\n\t\tconst portableTempPath = path.join(portableDataPath, 'tmp');\n\t\tconst isTempPortable = isPortable && fs.existsSync(portableTempPath);\n\n\t\tif (isPortable) {\n\t\t\tprocess.env['VSCODE_PORTABLE'] = portableDataPath;\n\t\t} else {\n\t\t\tdelete process.env['VSCODE_PORTABLE'];\n\t\t}\n\n\t\tif (isTempPortable) {\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tprocess.env['TMP'] = portableTempPath;\n\t\t\t\tprocess.env['TEMP'] = portableTempPath;\n\t\t\t} else {\n\t\t\t\tprocess.env['TMPDIR'] = portableTempPath;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tportableDataPath,\n\t\t\tisPortable\n\t\t};\n\t}\n\n\t//#endregion\n\n\n\t//#region ApplicationInsights\n\n\t// Prevents appinsights from monkey patching modules.\n\t// This should be called before importing the applicationinsights module\n\tfunction avoidMonkeyPatchFromAppInsights() {\n\t\t// @ts-ignore\n\t\tprocess.env['APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL'] = true; // Skip monkey patching of 3rd party modules by appinsights\n\t\tglobal['diagnosticsSource'] = {}; // Prevents diagnostic channel (which patches \"require\") from initializing entirely\n\t}\n\n\t//#endregion\n\n\n\treturn {\n\t\tenableASARSupport,\n\t\tavoidMonkeyPatchFromAppInsights,\n\t\tconfigurePortable,\n\t\tsetupNLS,\n\t\tfileUriFromPath\n\t};\n}));\n"]}